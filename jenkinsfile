pipeline {
    agent any
    triggers {
        githubPush() 
    }
    tools {
        jdk 'jdk17'
        maven 'maven3'
    }
    stages {
        stage ('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage ('Checkout SCM') {
            steps {
                git branch:'master', url: 'https://github.com/prraneth265/jpetstore-6.git'
            }
        }
        stage('Build') {
            parallel {
                stage ('Maven Compile') {
                    steps {
                        sh 'mvn clean compile'
                    }
                }
                stage ('Maven Test') {
                    steps {
                        sh 'mvn test'
                    }
                }
            }
        }
        stage ('Stop and Remove Old Container') {
            steps {
                sh "docker stop pet1 || true"
                sh "docker rm pet1 || true"
            }
        }
        stage ('Build WAR File') {
            steps {
                sh 'mvn clean install -DskipTests=true'
            }
            post {
                success {
                    echo 'Now Archiving...'
                }
            }
        }
        stage ('Build and Push to Docker Hub') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        sh "docker build -t petshop ."
                        sh "docker tag petshop prraneth2812/new:${BUILD_NUMBER}"
                        sh "docker push prraneth2812/new:${BUILD_NUMBER}"
                    }
                }
            }
        }
        stage ('Deploy to Container') {
            steps {
                script {
                    sh "docker run -d --name pet1 -p 8080:8080 prraneth2812/new:${BUILD_NUMBER}"
                }
            }
        } 
    }
    post {
        success {
            echo 'Build succeeded!'
            sh 'echo "Performing post-build actions for success...${BUILD_NUMBER}"'
        }
        failure {
            echo 'Build failed!'
            sh 'echo "Performing post-build actions for failure...${BUILD_NUMBER} "'
        }
        unstable {
            echo 'The build is unstable! Sending notifications...if the build got success but there are some error pls go through it'
        }
        aborted {
            echo 'The build was aborted! Sending notifications...'
        }
        always {
            echo 'Build finished. Performing cleanup...'
        }
    }
}
